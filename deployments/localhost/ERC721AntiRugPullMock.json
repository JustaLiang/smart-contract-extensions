{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EtherReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION_SEC",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPORT_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIdList",
          "type": "uint256[]"
        }
      ],
      "name": "reMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIdList",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIdList",
          "type": "uint256[]"
        }
      ],
      "name": "report",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "returningValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setRedeemable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReportAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "vestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "vestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x234cec863acb65fed4ae27b156200c7340925469dc54580e0341cc7ea7ec3953",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2443373",
    "logsBloom": "0x
    "blockHash": "0x6ed9fc565b63fa78994b7aebe1d13f0a343dc9f613c0c58d6cfdad6138074431",
    "transactionHash": "0x234cec863acb65fed4ae27b156200c7340925469dc54580e0341cc7ea7ec3953",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2443373",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "67fcd2de879020317ed766650720fe2a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION_SEC\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORT_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"reMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"returningValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRedeemable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReportAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"beneficiary()\":{\"details\":\"Getter for the beneficiary address.\"},\"constructor\":{\"details\":\"Setup ERC721, VestingWallet and the report threshold\"},\"duration()\":{\"details\":\"Getter for the vesting duration.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"release()\":{\"details\":\"Release the native token (ether) that have already vested. Emits a {TokensReleased} event.\"},\"release(address)\":{\"details\":\"Release the tokens that have already vested. Emits a {TokensReleased} event.\"},\"released()\":{\"details\":\"Amount of eth already released\"},\"released(address)\":{\"details\":\"Amount of token already released\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"start()\":{\"details\":\"Getter for the start timestamp.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"vestedAmount(address,uint64)\":{\"details\":\"Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\"},\"vestedAmount(uint64)\":{\"details\":\"Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\"}},\"title\":\"Testing the usage of ERC721AntiRugPull\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DURATION_SEC()\":{\"notice\":\"Duration sec\"},\"MAX_SUPPLY()\":{\"notice\":\"Max supply\"},\"MINT_PRICE()\":{\"notice\":\"Mint price\"},\"REPORT_THRESHOLD()\":{\"notice\":\"Report threshold\"},\"mint(uint256)\":{\"notice\":\"Mint\"},\"reMint(uint256[])\":{\"notice\":\"Re-mint from contract\"},\"redeem()\":{\"notice\":\"Redeem for reporters\"},\"redeem(uint256[])\":{\"notice\":\"Redeem if redeemable (report successfully)\"},\"redeemable()\":{\"notice\":\"If it's redeemable now (report successfully)\"},\"report(uint256[])\":{\"notice\":\"Report using your tokens\"},\"returningValue(address)\":{\"notice\":\"Returning token amount of each reporter\"},\"setRedeemable()\":{\"notice\":\"Set redeemable if report amount exceed threshold\"},\"threshold()\":{\"notice\":\"Thresold of report amount\"},\"tokenMintPrice(uint256)\":{\"notice\":\"Mint price of each token\"},\"totalReportAmount()\":{\"notice\":\"Cumulative report amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/ERC721AntiRugPullMock.sol\":\"ERC721AntiRugPullMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/finance/VestingWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/VestingWallet.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/Math.sol\\\";\\n\\n/**\\n * @title VestingWallet\\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract VestingWallet is Context {\\n    event EtherReleased(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n\\n    uint256 private _released;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable _beneficiary;\\n    uint64 private immutable _start;\\n    uint64 private immutable _duration;\\n\\n    /**\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\n     */\\n    constructor(\\n        address beneficiaryAddress,\\n        uint64 startTimestamp,\\n        uint64 durationSeconds\\n    ) {\\n        require(beneficiaryAddress != address(0), \\\"VestingWallet: beneficiary is zero address\\\");\\n        _beneficiary = beneficiaryAddress;\\n        _start = startTimestamp;\\n        _duration = durationSeconds;\\n    }\\n\\n    /**\\n     * @dev The contract should be able to receive Eth.\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @dev Getter for the beneficiary address.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Getter for the start timestamp.\\n     */\\n    function start() public view virtual returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @dev Amount of eth already released\\n     */\\n    function released() public view virtual returns (uint256) {\\n        return _released;\\n    }\\n\\n    /**\\n     * @dev Amount of token already released\\n     */\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    /**\\n     * @dev Release the native token (ether) that have already vested.\\n     *\\n     * Emits a {TokensReleased} event.\\n     */\\n    function release() public virtual {\\n        uint256 releasable = vestedAmount(uint64(block.timestamp)) - released();\\n        _released += releasable;\\n        emit EtherReleased(releasable);\\n        Address.sendValue(payable(beneficiary()), releasable);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     *\\n     * Emits a {TokensReleased} event.\\n     */\\n    function release(address token) public virtual {\\n        uint256 releasable = vestedAmount(token, uint64(block.timestamp)) - released(token);\\n        _erc20Released[token] += releasable;\\n        emit ERC20Released(token, releasable);\\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), releasable);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(address(this).balance + released(), timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\\n    }\\n\\n    /**\\n     * @dev Virtual implementation of the vesting formula. This returns the amout vested, as a function of time, for\\n     * an asset given its total historical allocation.\\n     */\\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\\n        if (timestamp < start()) {\\n            return 0;\\n        } else if (timestamp > start() + duration()) {\\n            return totalAllocation;\\n        } else {\\n            return (totalAllocation * (timestamp - start())) / duration();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeafe284c0deea23cb4bff99292901015a2525145bf23ddd711eaa85ca305ef8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/ERC721AntiRugPull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Justa Liang\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/finance/VestingWallet.sol\\\";\\n\\n/**\\n * @title ERC721 with anti-rug-pull mechanism\\n * @dev This contract combines ERC721Enumerable and VestingWallet.\\n */\\nabstract contract ERC721AntiRugPull is ERC721Enumerable, VestingWallet {\\n    /// @notice Thresold of report amount\\n    uint256 public immutable threshold;\\n\\n    /// @notice Mint price of each token\\n    mapping(uint256 => uint256) public tokenMintPrice;\\n\\n    /// @notice If it's redeemable now (report successfully)\\n    bool public redeemable;\\n\\n    /// @notice Cumulative report amount\\n    uint256 public totalReportAmount;\\n\\n    /// @notice Returning token amount of each reporter\\n    mapping(address => uint256) public returningValue;\\n\\n    /// @dev Setup threshold\\n    constructor(uint256 _threshold) {\\n        threshold = _threshold;\\n        redeemable = false;\\n        totalReportAmount = 0;\\n    }\\n\\n    /// @notice Report using your tokens\\n    function report(uint256[] calldata tokenIdList) external {\\n        uint256 amount = tokenIdList.length;\\n        for (uint256 i = 0; i < amount; i++) {\\n            uint256 tokenId = tokenIdList[i];\\n            require(ownerOf(tokenId) == _msgSender(), \\\"Not owner\\\");\\n            _transfer(_msgSender(), address(this), tokenId);\\n            returningValue[_msgSender()] += tokenMintPrice[tokenId];\\n        }\\n        totalReportAmount += amount;\\n    }\\n\\n    /// @notice Set redeemable if report amount exceed threshold\\n    function setRedeemable() external {\\n        require(totalReportAmount >= threshold, \\\"Report amount not enough\\\");\\n        redeemable = true;\\n    }\\n\\n    /// @notice Redeem for reporters\\n    function redeem() external {\\n        require(redeemable, \\\"Not redeemable\\\");\\n        uint256 funding = returningValue[_msgSender()];\\n        Address.sendValue(\\n            payable(_msgSender()),\\n            funding - _vestingSchedule(funding, uint64(block.timestamp))\\n        );\\n    }\\n\\n    /// @notice Redeem if redeemable (report successfully)\\n    function redeem(uint256[] calldata tokenIdList) external {\\n        require(redeemable, \\\"Not redeemable\\\");\\n        uint256 amount = tokenIdList.length;\\n        uint256 funding = 0;\\n        for (uint256 i = 0; i < amount; i++) {\\n            uint256 tokenId = tokenIdList[i];\\n            require(ownerOf(tokenId) == _msgSender(), \\\"Not owner\\\");\\n            _transfer(_msgSender(), address(this), tokenId);\\n            funding += tokenMintPrice[tokenId];\\n        }\\n        Address.sendValue(\\n            payable(_msgSender()),\\n            funding - _vestingSchedule(funding, uint64(block.timestamp))\\n        );\\n    }\\n\\n    /// @notice Re-mint from contract\\n    function reMint(uint256[] calldata tokenIdList) external payable {\\n        uint256 amount = tokenIdList.length;\\n        uint256 funding = 0;\\n        for (uint256 i = 0; i < amount; i++) {\\n            uint256 tokenId = tokenIdList[i];\\n            require(ownerOf(tokenId) == address(this), \\\"Token not in contract\\\");\\n            _transfer(address(this), _msgSender(), tokenId);\\n            funding += tokenMintPrice[tokenId];\\n        }\\n        require(msg.value >= funding, \\\"Not enough fund\\\");\\n    }\\n\\n    /// @dev Mint and record the mint price\\n    function _mintWithPrice(\\n        address to,\\n        uint256 tokenId,\\n        uint256 mintPrice\\n    ) internal {\\n        _mint(to, tokenId);\\n        tokenMintPrice[tokenId] = mintPrice;\\n    }\\n\\n    /// @dev Burn and delete price storage\\n    function _burn(uint256 tokenId) internal override {\\n        super._burn(tokenId);\\n        delete tokenMintPrice[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x1eea79916617d7f8c164c7f73bb51120ebb80278fb41f77b0004db09af70d22e\",\"license\":\"MIT\"},\"contracts/mock/ERC721AntiRugPullMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creators: Justa Liang\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../ERC721AntiRugPull.sol\\\";\\n\\n/**\\n * @title Testing the usage of ERC721AntiRugPull\\n */\\ncontract ERC721AntiRugPullMock is ERC721AntiRugPull {\\n    /// @notice Max supply\\n    uint256 public constant MAX_SUPPLY = 100;\\n\\n    /// @notice Report threshold\\n    uint256 public constant REPORT_THRESHOLD = 20;\\n\\n    /// @notice Mint price\\n    uint256 public constant MINT_PRICE = 0.1 ether;\\n\\n    /// @notice Duration sec\\n    uint64 public constant DURATION_SEC = 1 weeks;\\n\\n    /// @dev Setup ERC721, VestingWallet and the report threshold\\n    constructor()\\n        ERC721(\\\"RugGripper\\\", \\\"RuG\\\")\\n        VestingWallet(_msgSender(), uint64(block.timestamp), DURATION_SEC)\\n        ERC721AntiRugPull(REPORT_THRESHOLD)\\n    {}\\n\\n    /// @notice Mint\\n    function mint(uint256 amount) external payable {\\n        uint256 newTokenId = totalSupply();\\n        require(msg.value >= amount * MINT_PRICE, \\\"not enough fund\\\");\\n        require(newTokenId + amount <= MAX_SUPPLY, \\\"exceed max supply\\\");\\n        for (uint256 i = 0; i < amount; ++i) {\\n            _mintWithPrice(_msgSender(), newTokenId++, MAX_SUPPLY);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3265e90a5548358446283932ccc6023b70c8c67105bffb6ab904d8cd1de2829a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50601433604080518082018252600a815269293ab3a3b934b83832b960b11b60208083019182528351808501909452600384526252754760e81b908401528151429362093a80939290916200006a9160009162000138565b5080516200008090600190602084019062000138565b5050506001600160a01b038316620000f15760405162461bcd60e51b815260206004820152602a60248201527f56657374696e6757616c6c65743a2062656e6566696369617279206973207a65604482015269726f206164647265737360b01b606482015260840160405180910390fd5b60609290921b6001600160601b03191660805260c090811b6001600160c01b031990811660a05291811b909116905260e052600d805460ff191690556000600e556200021b565b8280546200014690620001de565b90600052602060002090601f0160209004810192826200016a5760008555620001b5565b82601f106200018557805160ff1916838001178555620001b5565b82800160010185558215620001b5579182015b82811115620001b557825182559160200191906001019062000198565b50620001c3929150620001c7565b5090565b5b80821115620001c35760008155600101620001c8565b600181811c90821680620001f357607f821691505b602082108114156200021557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160c01c60c05160c01c60e051612a3a62000281600039600081816104850152610b3001526000818161033901528181611607015261165c0152600061130201526000818161042f01528181610ad40152610f130152612a3a6000f3fe60806040526004361061023f5760003560e01c8063810ec23b1161012e578063b88d4fde116100ab578063cf21ed7f1161006f578063cf21ed7f146106ca578063e0625ead146106e0578063e985e9c51461070d578063f9afb26a14610756578063fcc048911461077657600080fd5b8063b88d4fde14610644578063be040fb014610664578063be9a655514610679578063c002d23d1461068e578063c87b56dd146106aa57600080fd5b80639852595c116100f25780639852595c1461058e5780639f3bfb9a146105c4578063a0712d68146105e4578063a22cb465146105f7578063b462c28d1461061757600080fd5b8063810ec23b1461051c57806386d1a69f1461053c57806395d89b4114610551578063961325211461056657806396cbbeac1461057b57600080fd5b80632d7ecd11116101bc57806342cde4e81161018057806342cde4e8146104735780634aa06447146104a75780634f6ccce7146104bc5780636352211e146104dc57806370a08231146104fc57600080fd5b80632d7ecd11146103d15780632f745c59146103eb57806332cb6b0c1461040b57806338af3eed1461042057806342842e0e1461045357600080fd5b80630fb5a6b4116102035780630fb5a6b41461032a57806318160ddd14610367578063191655871461037c57806323b872dd1461039c5780632a578cc1146103bc57600080fd5b806301ffc9a71461024b57806306fdde0314610280578063081812fc146102a2578063095ea7b3146102da5780630a17b06b146102fc57600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b6102663660046126ba565b6107a6565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102956107d1565b60405161027791906127f0565b3480156102ae57600080fd5b506102c26102bd3660046126f2565b610863565b6040516001600160a01b039091168152602001610277565b3480156102e657600080fd5b506102fa6102f53660046125dc565b6108fd565b005b34801561030857600080fd5b5061031c610317366004612722565b610a13565b604051908152602001610277565b34801561033657600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661031c565b34801561037357600080fd5b5060085461031c565b34801561038857600080fd5b506102fa61039736600461244a565b610a31565b3480156103a857600080fd5b506102fa6103b7366004612496565b610afd565b3480156103c857600080fd5b506102fa610b2e565b3480156103dd57600080fd5b50600d5461026b9060ff1681565b3480156103f757600080fd5b5061031c6104063660046125dc565b610baf565b34801561041757600080fd5b5061031c606481565b34801561042c57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c2565b34801561045f57600080fd5b506102fa61046e366004612496565b610c45565b34801561047f57600080fd5b5061031c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b357600080fd5b5061031c601481565b3480156104c857600080fd5b5061031c6104d73660046126f2565b610c60565b3480156104e857600080fd5b506102c26104f73660046126f2565b610d01565b34801561050857600080fd5b5061031c61051736600461244a565b610d78565b34801561052857600080fd5b5061031c610537366004612605565b610dff565b34801561054857600080fd5b506102fa610ea4565b34801561055d57600080fd5b50610295610f3b565b34801561057257600080fd5b50600a5461031c565b6102fa61058936600461262e565b610f4a565b34801561059a57600080fd5b5061031c6105a936600461244a565b6001600160a01b03166000908152600b602052604090205490565b3480156105d057600080fd5b506102fa6105df36600461262e565b611066565b6102fa6105f23660046126f2565b611168565b34801561060357600080fd5b506102fa6106123660046125a6565b611248565b34801561062357600080fd5b5061031c61063236600461244a565b600f6020526000908152604090205481565b34801561065057600080fd5b506102fa61065f3660046124d1565b611253565b34801561067057600080fd5b506102fa611285565b34801561068557600080fd5b5061031c6112f7565b34801561069a57600080fd5b5061031c67016345785d8a000081565b3480156106b657600080fd5b506102956106c53660046126f2565b611325565b3480156106d657600080fd5b5061031c600e5481565b3480156106ec57600080fd5b5061031c6106fb3660046126f2565b600c6020526000908152604090205481565b34801561071957600080fd5b5061026b610728366004612464565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561076257600080fd5b506102fa61077136600461262e565b61140c565b34801561078257600080fd5b5061078d62093a8081565b60405167ffffffffffffffff9091168152602001610277565b60006001600160e01b0319821663780e9d6360e01b14806107cb57506107cb82611524565b92915050565b6060600080546107e090612934565b80601f016020809104026020016040519081016040528092919081815260200182805461080c90612934565b80156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108e15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061090882610d01565b9050806001600160a01b0316836001600160a01b031614156109765760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108d8565b336001600160a01b038216148061099257506109928133610728565b610a045760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108d8565b610a0e8383611574565b505050565b60006107cb610a21600a5490565b610a2b90476128a6565b836115e2565b6001600160a01b0381166000908152600b6020526040812054610a548342610dff565b610a5e91906128f1565b6001600160a01b0383166000908152600b6020526040812080549293508392909190610a8b9084906128a6565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a2610af9827f0000000000000000000000000000000000000000000000000000000000000000836116bc565b5050565b610b07338261170e565b610b235760405162461bcd60e51b81526004016108d890612855565b610a0e838383611805565b7f0000000000000000000000000000000000000000000000000000000000000000600e541015610ba05760405162461bcd60e51b815260206004820152601860248201527f5265706f727420616d6f756e74206e6f7420656e6f756768000000000000000060448201526064016108d8565b600d805460ff19166001179055565b6000610bba83610d78565b8210610c1c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016108d8565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610a0e83838360405180602001604052806000815250611253565b6000610c6b60085490565b8210610cce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016108d8565b60088281548110610cef57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806107cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108d8565b60006001600160a01b038216610de35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108d8565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0382166000908152600b6020526040812054610e9d906040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e93919061270a565b610a2b91906128a6565b9392505050565b6000610eaf600a5490565b610eb842610a13565b610ec291906128f1565b905080600a6000828254610ed691906128a6565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a1610f387f0000000000000000000000000000000000000000000000000000000000000000826119ac565b50565b6060600180546107e090612934565b806000805b8281101561101d576000858583818110610f7957634e487b7160e01b600052603260045260246000fd5b905060200201359050306001600160a01b0316610f9582610d01565b6001600160a01b031614610fe35760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881b9bdd081a5b8818dbdb9d1c9858dd605a1b60448201526064016108d8565b610fee303383611805565b6000818152600c602052604090205461100790846128a6565b92505080806110159061296f565b915050610f4f565b50803410156110605760405162461bcd60e51b815260206004820152600f60248201526e139bdd08195b9bdd59da08199d5b99608a1b60448201526064016108d8565b50505050565b8060005b8181101561114b57600084848381811061109457634e487b7160e01b600052603260045260246000fd5b9050602002013590506110a43390565b6001600160a01b03166110b682610d01565b6001600160a01b0316146110f85760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016108d8565b611104335b3083611805565b6000818152600c6020908152604080832054338452600f90925282208054919290916111319084906128a6565b9091555082915061114390508161296f565b91505061106a565b5080600e600082825461115e91906128a6565b9091555050505050565b600061117360085490565b905061118767016345785d8a0000836128d2565b3410156111c85760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da08199d5b99608a1b60448201526064016108d8565b60646111d483836128a6565b11156112165760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b60448201526064016108d8565b60005b82811015610a0e57611238338361122f8161296f565b94506064611ac5565b6112418161296f565b9050611219565b610af9338383611ae2565b61125d338361170e565b6112795760405162461bcd60e51b81526004016108d890612855565b61106084848484611bb1565b600d5460ff166112c85760405162461bcd60e51b815260206004820152600e60248201526d4e6f742072656465656d61626c6560901b60448201526064016108d8565b336000818152600f602052604090205490610f38905b6112e883426115e2565b6112f290846128f1565b6119ac565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b6000818152600260205260409020546060906001600160a01b03166113a45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108d8565b60006113bb60408051602081019091526000815290565b905060008151116113db5760405180602001604052806000815250610e9d565b806113e584611be4565b6040516020016113f6929190612784565b6040516020818303038152906040529392505050565b600d5460ff1661144f5760405162461bcd60e51b815260206004820152600e60248201526d4e6f742072656465656d61626c6560901b60448201526064016108d8565b806000805b8281101561151a57600085858381811061147e57634e487b7160e01b600052603260045260246000fd5b90506020020135905061148e3390565b6001600160a01b03166114a082610d01565b6001600160a01b0316146114e25760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016108d8565b6114eb336110fd565b6000818152600c602052604090205461150490846128a6565b92505080806115129061296f565b915050611454565b50611060336112de565b60006001600160e01b031982166380ac58cd60e01b148061155557506001600160e01b03198216635b5e139f60e01b145b806107cb57506301ffc9a760e01b6001600160e01b03198316146107cb565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906115a982610d01565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115ec6112f7565b8267ffffffffffffffff161015611605575060006107cb565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166116386112f7565b61164291906128a6565b8267ffffffffffffffff16111561165a5750816107cb565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661168d6112f7565b6116a19067ffffffffffffffff85166128f1565b6116ab90856128d2565b6116b591906128be565b90506107cb565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a0e908490611cfe565b6000818152600260205260408120546001600160a01b03166117875760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108d8565b600061179283610d01565b9050806001600160a01b0316846001600160a01b031614806117cd5750836001600160a01b03166117c284610863565b6001600160a01b0316145b806117fd57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661181882610d01565b6001600160a01b03161461187c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108d8565b6001600160a01b0382166118de5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108d8565b6118e9838383611dd0565b6118f4600082611574565b6001600160a01b038316600090815260036020526040812080546001929061191d9084906128f1565b90915550506001600160a01b038216600090815260036020526040812080546001929061194b9084906128a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b804710156119fc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108d8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611a49576040519150601f19603f3d011682016040523d82523d6000602084013e611a4e565b606091505b5050905080610a0e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108d8565b611acf8383611e88565b6000918252600c60205260409091205550565b816001600160a01b0316836001600160a01b03161415611b445760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108d8565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611bbc848484611805565b611bc884848484611fd6565b6110605760405162461bcd60e51b81526004016108d890612803565b606081611c085750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c325780611c1c8161296f565b9150611c2b9050600a836128be565b9150611c0c565b60008167ffffffffffffffff811115611c5b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c85576020820181803683370190505b5090505b84156117fd57611c9a6001836128f1565b9150611ca7600a8661298a565b611cb29060306128a6565b60f81b818381518110611cd557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611cf7600a866128be565b9450611c89565b6000611d53826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120e39092919063ffffffff16565b805190915015610a0e5780806020019051810190611d71919061269e565b610a0e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d8565b6001600160a01b038316611e2b57611e2681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611e4e565b816001600160a01b0316836001600160a01b031614611e4e57611e4e83826120f2565b6001600160a01b038216611e6557610a0e8161218f565b826001600160a01b0316826001600160a01b031614610a0e57610a0e8282612268565b6001600160a01b038216611ede5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108d8565b6000818152600260205260409020546001600160a01b031615611f435760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108d8565b611f4f60008383611dd0565b6001600160a01b0382166000908152600360205260408120805460019290611f789084906128a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b156120d857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061201a9033908990889088906004016127b3565b602060405180830381600087803b15801561203457600080fd5b505af1925050508015612064575060408051601f3d908101601f19168201909252612061918101906126d6565b60015b6120be573d808015612092576040519150601f19603f3d011682016040523d82523d6000602084013e612097565b606091505b5080516120b65760405162461bcd60e51b81526004016108d890612803565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117fd565b506001949350505050565b60606117fd84846000856122ac565b600060016120ff84610d78565b61210991906128f1565b60008381526007602052604090205490915080821461215c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906121a1906001906128f1565b600083815260096020526040812054600880549394509092849081106121d757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061220657634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061224c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061227383610d78565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60608247101561230d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108d8565b6001600160a01b0385163b6123645760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d8565b600080866001600160a01b031685876040516123809190612768565b60006040518083038185875af1925050503d80600081146123bd576040519150601f19603f3d011682016040523d82523d6000602084013e6123c2565b606091505b50915091506123d28282866123dd565b979650505050505050565b606083156123ec575081610e9d565b8251156123fc5782518084602001fd5b8160405162461bcd60e51b81526004016108d891906127f0565b80356001600160a01b038116811461242d57600080fd5b919050565b803567ffffffffffffffff8116811461242d57600080fd5b60006020828403121561245b578081fd5b610e9d82612416565b60008060408385031215612476578081fd5b61247f83612416565b915061248d60208401612416565b90509250929050565b6000806000606084860312156124aa578081fd5b6124b384612416565b92506124c160208501612416565b9150604084013590509250925092565b600080600080608085870312156124e6578081fd5b6124ef85612416565b93506124fd60208601612416565b925060408501359150606085013567ffffffffffffffff80821115612520578283fd5b818701915087601f830112612533578283fd5b813581811115612545576125456129ca565b604051601f8201601f19908116603f0116810190838211818310171561256d5761256d6129ca565b816040528281528a6020848701011115612585578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156125b8578182fd5b6125c183612416565b915060208301356125d1816129e0565b809150509250929050565b600080604083850312156125ee578182fd5b6125f783612416565b946020939093013593505050565b60008060408385031215612617578182fd5b61262083612416565b915061248d60208401612432565b60008060208385031215612640578182fd5b823567ffffffffffffffff80821115612657578384fd5b818501915085601f83011261266a578384fd5b813581811115612678578485fd5b8660208260051b850101111561268c578485fd5b60209290920196919550909350505050565b6000602082840312156126af578081fd5b8151610e9d816129e0565b6000602082840312156126cb578081fd5b8135610e9d816129ee565b6000602082840312156126e7578081fd5b8151610e9d816129ee565b600060208284031215612703578081fd5b5035919050565b60006020828403121561271b578081fd5b5051919050565b600060208284031215612733578081fd5b610e9d82612432565b60008151808452612754816020860160208601612908565b601f01601f19169290920160200192915050565b6000825161277a818460208701612908565b9190910192915050565b60008351612796818460208801612908565b8351908301906127aa818360208801612908565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127e69083018461273c565b9695505050505050565b602081526000610e9d602083018461273c565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156128b9576128b961299e565b500190565b6000826128cd576128cd6129b4565b500490565b60008160001904831182151516156128ec576128ec61299e565b500290565b6000828210156129035761290361299e565b500390565b60005b8381101561292357818101518382015260200161290b565b838111156110605750506000910152565b600181811c9082168061294857607f821691505b6020821081141561296957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129835761298361299e565b5060010190565b600082612999576129996129b4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610f3857600080fd5b6001600160e01b031981168114610f3857600080fdfea26469706673582212202329527ef8189c7f0358e71087cda6de0a9dd1ae1b57c573d51b19e05167687064736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c8063810ec23b1161012e578063b88d4fde116100ab578063cf21ed7f1161006f578063cf21ed7f146106ca578063e0625ead146106e0578063e985e9c51461070d578063f9afb26a14610756578063fcc048911461077657600080fd5b8063b88d4fde14610644578063be040fb014610664578063be9a655514610679578063c002d23d1461068e578063c87b56dd146106aa57600080fd5b80639852595c116100f25780639852595c1461058e5780639f3bfb9a146105c4578063a0712d68146105e4578063a22cb465146105f7578063b462c28d1461061757600080fd5b8063810ec23b1461051c57806386d1a69f1461053c57806395d89b4114610551578063961325211461056657806396cbbeac1461057b57600080fd5b80632d7ecd11116101bc57806342cde4e81161018057806342cde4e8146104735780634aa06447146104a75780634f6ccce7146104bc5780636352211e146104dc57806370a08231146104fc57600080fd5b80632d7ecd11146103d15780632f745c59146103eb57806332cb6b0c1461040b57806338af3eed1461042057806342842e0e1461045357600080fd5b80630fb5a6b4116102035780630fb5a6b41461032a57806318160ddd14610367578063191655871461037c57806323b872dd1461039c5780632a578cc1146103bc57600080fd5b806301ffc9a71461024b57806306fdde0314610280578063081812fc146102a2578063095ea7b3146102da5780630a17b06b146102fc57600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b6102663660046126ba565b6107a6565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102956107d1565b60405161027791906127f0565b3480156102ae57600080fd5b506102c26102bd3660046126f2565b610863565b6040516001600160a01b039091168152602001610277565b3480156102e657600080fd5b506102fa6102f53660046125dc565b6108fd565b005b34801561030857600080fd5b5061031c610317366004612722565b610a13565b604051908152602001610277565b34801561033657600080fd5b507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661031c565b34801561037357600080fd5b5060085461031c565b34801561038857600080fd5b506102fa61039736600461244a565b610a31565b3480156103a857600080fd5b506102fa6103b7366004612496565b610afd565b3480156103c857600080fd5b506102fa610b2e565b3480156103dd57600080fd5b50600d5461026b9060ff1681565b3480156103f757600080fd5b5061031c6104063660046125dc565b610baf565b34801561041757600080fd5b5061031c606481565b34801561042c57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c2565b34801561045f57600080fd5b506102fa61046e366004612496565b610c45565b34801561047f57600080fd5b5061031c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b357600080fd5b5061031c601481565b3480156104c857600080fd5b5061031c6104d73660046126f2565b610c60565b3480156104e857600080fd5b506102c26104f73660046126f2565b610d01565b34801561050857600080fd5b5061031c61051736600461244a565b610d78565b34801561052857600080fd5b5061031c610537366004612605565b610dff565b34801561054857600080fd5b506102fa610ea4565b34801561055d57600080fd5b50610295610f3b565b34801561057257600080fd5b50600a5461031c565b6102fa61058936600461262e565b610f4a565b34801561059a57600080fd5b5061031c6105a936600461244a565b6001600160a01b03166000908152600b602052604090205490565b3480156105d057600080fd5b506102fa6105df36600461262e565b611066565b6102fa6105f23660046126f2565b611168565b34801561060357600080fd5b506102fa6106123660046125a6565b611248565b34801561062357600080fd5b5061031c61063236600461244a565b600f6020526000908152604090205481565b34801561065057600080fd5b506102fa61065f3660046124d1565b611253565b34801561067057600080fd5b506102fa611285565b34801561068557600080fd5b5061031c6112f7565b34801561069a57600080fd5b5061031c67016345785d8a000081565b3480156106b657600080fd5b506102956106c53660046126f2565b611325565b3480156106d657600080fd5b5061031c600e5481565b3480156106ec57600080fd5b5061031c6106fb3660046126f2565b600c6020526000908152604090205481565b34801561071957600080fd5b5061026b610728366004612464565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561076257600080fd5b506102fa61077136600461262e565b61140c565b34801561078257600080fd5b5061078d62093a8081565b60405167ffffffffffffffff9091168152602001610277565b60006001600160e01b0319821663780e9d6360e01b14806107cb57506107cb82611524565b92915050565b6060600080546107e090612934565b80601f016020809104026020016040519081016040528092919081815260200182805461080c90612934565b80156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108e15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061090882610d01565b9050806001600160a01b0316836001600160a01b031614156109765760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108d8565b336001600160a01b038216148061099257506109928133610728565b610a045760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108d8565b610a0e8383611574565b505050565b60006107cb610a21600a5490565b610a2b90476128a6565b836115e2565b6001600160a01b0381166000908152600b6020526040812054610a548342610dff565b610a5e91906128f1565b6001600160a01b0383166000908152600b6020526040812080549293508392909190610a8b9084906128a6565b90915550506040518181526001600160a01b038316907fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b9060200160405180910390a2610af9827f0000000000000000000000000000000000000000000000000000000000000000836116bc565b5050565b610b07338261170e565b610b235760405162461bcd60e51b81526004016108d890612855565b610a0e838383611805565b7f0000000000000000000000000000000000000000000000000000000000000000600e541015610ba05760405162461bcd60e51b815260206004820152601860248201527f5265706f727420616d6f756e74206e6f7420656e6f756768000000000000000060448201526064016108d8565b600d805460ff19166001179055565b6000610bba83610d78565b8210610c1c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016108d8565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610a0e83838360405180602001604052806000815250611253565b6000610c6b60085490565b8210610cce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016108d8565b60088281548110610cef57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806107cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108d8565b60006001600160a01b038216610de35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108d8565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0382166000908152600b6020526040812054610e9d906040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e93919061270a565b610a2b91906128a6565b9392505050565b6000610eaf600a5490565b610eb842610a13565b610ec291906128f1565b905080600a6000828254610ed691906128a6565b90915550506040518181527fda9d4e5f101b8b9b1c5b76d0c5a9f7923571acfc02376aa076b75a8c080c956b9060200160405180910390a1610f387f0000000000000000000000000000000000000000000000000000000000000000826119ac565b50565b6060600180546107e090612934565b806000805b8281101561101d576000858583818110610f7957634e487b7160e01b600052603260045260246000fd5b905060200201359050306001600160a01b0316610f9582610d01565b6001600160a01b031614610fe35760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881b9bdd081a5b8818dbdb9d1c9858dd605a1b60448201526064016108d8565b610fee303383611805565b6000818152600c602052604090205461100790846128a6565b92505080806110159061296f565b915050610f4f565b50803410156110605760405162461bcd60e51b815260206004820152600f60248201526e139bdd08195b9bdd59da08199d5b99608a1b60448201526064016108d8565b50505050565b8060005b8181101561114b57600084848381811061109457634e487b7160e01b600052603260045260246000fd5b9050602002013590506110a43390565b6001600160a01b03166110b682610d01565b6001600160a01b0316146110f85760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016108d8565b611104335b3083611805565b6000818152600c6020908152604080832054338452600f90925282208054919290916111319084906128a6565b9091555082915061114390508161296f565b91505061106a565b5080600e600082825461115e91906128a6565b9091555050505050565b600061117360085490565b905061118767016345785d8a0000836128d2565b3410156111c85760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da08199d5b99608a1b60448201526064016108d8565b60646111d483836128a6565b11156112165760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b60448201526064016108d8565b60005b82811015610a0e57611238338361122f8161296f565b94506064611ac5565b6112418161296f565b9050611219565b610af9338383611ae2565b61125d338361170e565b6112795760405162461bcd60e51b81526004016108d890612855565b61106084848484611bb1565b600d5460ff166112c85760405162461bcd60e51b815260206004820152600e60248201526d4e6f742072656465656d61626c6560901b60448201526064016108d8565b336000818152600f602052604090205490610f38905b6112e883426115e2565b6112f290846128f1565b6119ac565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690565b6000818152600260205260409020546060906001600160a01b03166113a45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108d8565b60006113bb60408051602081019091526000815290565b905060008151116113db5760405180602001604052806000815250610e9d565b806113e584611be4565b6040516020016113f6929190612784565b6040516020818303038152906040529392505050565b600d5460ff1661144f5760405162461bcd60e51b815260206004820152600e60248201526d4e6f742072656465656d61626c6560901b60448201526064016108d8565b806000805b8281101561151a57600085858381811061147e57634e487b7160e01b600052603260045260246000fd5b90506020020135905061148e3390565b6001600160a01b03166114a082610d01565b6001600160a01b0316146114e25760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016108d8565b6114eb336110fd565b6000818152600c602052604090205461150490846128a6565b92505080806115129061296f565b915050611454565b50611060336112de565b60006001600160e01b031982166380ac58cd60e01b148061155557506001600160e01b03198216635b5e139f60e01b145b806107cb57506301ffc9a760e01b6001600160e01b03198316146107cb565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906115a982610d01565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115ec6112f7565b8267ffffffffffffffff161015611605575060006107cb565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166116386112f7565b61164291906128a6565b8267ffffffffffffffff16111561165a5750816107cb565b7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1661168d6112f7565b6116a19067ffffffffffffffff85166128f1565b6116ab90856128d2565b6116b591906128be565b90506107cb565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a0e908490611cfe565b6000818152600260205260408120546001600160a01b03166117875760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108d8565b600061179283610d01565b9050806001600160a01b0316846001600160a01b031614806117cd5750836001600160a01b03166117c284610863565b6001600160a01b0316145b806117fd57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661181882610d01565b6001600160a01b03161461187c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108d8565b6001600160a01b0382166118de5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108d8565b6118e9838383611dd0565b6118f4600082611574565b6001600160a01b038316600090815260036020526040812080546001929061191d9084906128f1565b90915550506001600160a01b038216600090815260036020526040812080546001929061194b9084906128a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b804710156119fc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108d8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611a49576040519150601f19603f3d011682016040523d82523d6000602084013e611a4e565b606091505b5050905080610a0e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108d8565b611acf8383611e88565b6000918252600c60205260409091205550565b816001600160a01b0316836001600160a01b03161415611b445760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108d8565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611bbc848484611805565b611bc884848484611fd6565b6110605760405162461bcd60e51b81526004016108d890612803565b606081611c085750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c325780611c1c8161296f565b9150611c2b9050600a836128be565b9150611c0c565b60008167ffffffffffffffff811115611c5b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c85576020820181803683370190505b5090505b84156117fd57611c9a6001836128f1565b9150611ca7600a8661298a565b611cb29060306128a6565b60f81b818381518110611cd557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611cf7600a866128be565b9450611c89565b6000611d53826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120e39092919063ffffffff16565b805190915015610a0e5780806020019051810190611d71919061269e565b610a0e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d8565b6001600160a01b038316611e2b57611e2681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611e4e565b816001600160a01b0316836001600160a01b031614611e4e57611e4e83826120f2565b6001600160a01b038216611e6557610a0e8161218f565b826001600160a01b0316826001600160a01b031614610a0e57610a0e8282612268565b6001600160a01b038216611ede5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108d8565b6000818152600260205260409020546001600160a01b031615611f435760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108d8565b611f4f60008383611dd0565b6001600160a01b0382166000908152600360205260408120805460019290611f789084906128a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b156120d857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061201a9033908990889088906004016127b3565b602060405180830381600087803b15801561203457600080fd5b505af1925050508015612064575060408051601f3d908101601f19168201909252612061918101906126d6565b60015b6120be573d808015612092576040519150601f19603f3d011682016040523d82523d6000602084013e612097565b606091505b5080516120b65760405162461bcd60e51b81526004016108d890612803565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117fd565b506001949350505050565b60606117fd84846000856122ac565b600060016120ff84610d78565b61210991906128f1565b60008381526007602052604090205490915080821461215c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906121a1906001906128f1565b600083815260096020526040812054600880549394509092849081106121d757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061220657634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061224c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061227383610d78565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60608247101561230d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108d8565b6001600160a01b0385163b6123645760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d8565b600080866001600160a01b031685876040516123809190612768565b60006040518083038185875af1925050503d80600081146123bd576040519150601f19603f3d011682016040523d82523d6000602084013e6123c2565b606091505b50915091506123d28282866123dd565b979650505050505050565b606083156123ec575081610e9d565b8251156123fc5782518084602001fd5b8160405162461bcd60e51b81526004016108d891906127f0565b80356001600160a01b038116811461242d57600080fd5b919050565b803567ffffffffffffffff8116811461242d57600080fd5b60006020828403121561245b578081fd5b610e9d82612416565b60008060408385031215612476578081fd5b61247f83612416565b915061248d60208401612416565b90509250929050565b6000806000606084860312156124aa578081fd5b6124b384612416565b92506124c160208501612416565b9150604084013590509250925092565b600080600080608085870312156124e6578081fd5b6124ef85612416565b93506124fd60208601612416565b925060408501359150606085013567ffffffffffffffff80821115612520578283fd5b818701915087601f830112612533578283fd5b813581811115612545576125456129ca565b604051601f8201601f19908116603f0116810190838211818310171561256d5761256d6129ca565b816040528281528a6020848701011115612585578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156125b8578182fd5b6125c183612416565b915060208301356125d1816129e0565b809150509250929050565b600080604083850312156125ee578182fd5b6125f783612416565b946020939093013593505050565b60008060408385031215612617578182fd5b61262083612416565b915061248d60208401612432565b60008060208385031215612640578182fd5b823567ffffffffffffffff80821115612657578384fd5b818501915085601f83011261266a578384fd5b813581811115612678578485fd5b8660208260051b850101111561268c578485fd5b60209290920196919550909350505050565b6000602082840312156126af578081fd5b8151610e9d816129e0565b6000602082840312156126cb578081fd5b8135610e9d816129ee565b6000602082840312156126e7578081fd5b8151610e9d816129ee565b600060208284031215612703578081fd5b5035919050565b60006020828403121561271b578081fd5b5051919050565b600060208284031215612733578081fd5b610e9d82612432565b60008151808452612754816020860160208601612908565b601f01601f19169290920160200192915050565b6000825161277a818460208701612908565b9190910192915050565b60008351612796818460208801612908565b8351908301906127aa818360208801612908565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127e69083018461273c565b9695505050505050565b602081526000610e9d602083018461273c565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156128b9576128b961299e565b500190565b6000826128cd576128cd6129b4565b500490565b60008160001904831182151516156128ec576128ec61299e565b500290565b6000828210156129035761290361299e565b500390565b60005b8381101561292357818101518382015260200161290b565b838111156110605750506000910152565b600181811c9082168061294857607f821691505b6020821081141561296957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129835761298361299e565b5060010190565b600082612999576129996129b4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610f3857600080fd5b6001600160e01b031981168114610f3857600080fdfea26469706673582212202329527ef8189c7f0358e71087cda6de0a9dd1ae1b57c573d51b19e05167687064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "beneficiary()": {
        "details": "Getter for the beneficiary address."
      },
      "constructor": {
        "details": "Setup ERC721, VestingWallet and the report threshold"
      },
      "duration()": {
        "details": "Getter for the vesting duration."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "release()": {
        "details": "Release the native token (ether) that have already vested. Emits a {TokensReleased} event."
      },
      "release(address)": {
        "details": "Release the tokens that have already vested. Emits a {TokensReleased} event."
      },
      "released()": {
        "details": "Amount of eth already released"
      },
      "released(address)": {
        "details": "Amount of token already released"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "start()": {
        "details": "Getter for the start timestamp."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "vestedAmount(address,uint64)": {
        "details": "Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve."
      },
      "vestedAmount(uint64)": {
        "details": "Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve."
      }
    },
    "title": "Testing the usage of ERC721AntiRugPull",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DURATION_SEC()": {
        "notice": "Duration sec"
      },
      "MAX_SUPPLY()": {
        "notice": "Max supply"
      },
      "MINT_PRICE()": {
        "notice": "Mint price"
      },
      "REPORT_THRESHOLD()": {
        "notice": "Report threshold"
      },
      "mint(uint256)": {
        "notice": "Mint"
      },
      "reMint(uint256[])": {
        "notice": "Re-mint from contract"
      },
      "redeem()": {
        "notice": "Redeem for reporters"
      },
      "redeem(uint256[])": {
        "notice": "Redeem if redeemable (report successfully)"
      },
      "redeemable()": {
        "notice": "If it's redeemable now (report successfully)"
      },
      "report(uint256[])": {
        "notice": "Report using your tokens"
      },
      "returningValue(address)": {
        "notice": "Returning token amount of each reporter"
      },
      "setRedeemable()": {
        "notice": "Set redeemable if report amount exceed threshold"
      },
      "threshold()": {
        "notice": "Thresold of report amount"
      },
      "tokenMintPrice(uint256)": {
        "notice": "Mint price of each token"
      },
      "totalReportAmount()": {
        "notice": "Cumulative report amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 619,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 621,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 625,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 629,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 633,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 639,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1608,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1612,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1615,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1619,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_released",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2650,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "tokenMintPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2653,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "redeemable",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2656,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "totalReportAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2661,
        "contract": "contracts/mock/ERC721AntiRugPullMock.sol:ERC721AntiRugPullMock",
        "label": "returningValue",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}